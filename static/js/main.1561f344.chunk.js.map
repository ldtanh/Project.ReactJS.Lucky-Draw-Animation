{"version":3,"sources":["LuckyDrawComponent.js","InputPopup.jsx","Congratulation.jsx","ListCandidates.js","App.jsx","serviceWorker.js","index.js"],"names":["LuckyDrawComponent","_this$props","this","props","candidates","handleFinished","drawLimit","react_default","a","createElement","lib_default","width","height","wheelSize","range","length","innerRadius","outerRadius","showInnerLabels","drawLimitSwitch","fontColor","fontSize","writingModel","drawButtonLabel","textArray","onSuccessDrawReturn","onOutLimitAlert","limit","window","alert","style","margin","React","Component","InputPopup","Form","create","name","_React$Component","_class","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","onCreate","getFieldDecorator","form","modal","title","okText","cancelText","onOk","visible","es_form","layout","Item","label","rules","required","message","input","extra","input_number","showCongratulation","selectedCandidate","handleStopFiring","Modal","success","content","fontWeight","color","icon","alt","src","ListCandidates","selectedCandidates","list","marginTop","header","size","bordered","dataSource","renderItem","item","App","state","luckyDrawTitle","isConfigPopupOpen","isFiring","handleCreate","_this","formRef","validateFields","err","values","resetFields","setState","split","parseInt","saveFormRef","onStopFiring","candidate","filter","onDrawingCompleted","candidateId","concat","toConsumableArray","className","src_InputPopup","wrappedComponentRef","LuckyDrawComponent_LuckyDrawComponent","ListCandidates_ListCandidates","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1561f344.chunk.js","sourcesContent":["import React from \"react\";\nimport LuckyDraw from \"react-luckydraw\";\nimport \"react-luckydraw/lib/LuckyDraw.css\";\n\nexport default class LuckyDrawComponent extends React.Component {\n  render() {\n    const { candidates, handleFinished, drawLimit } = this.props;\n    return (\n      <LuckyDraw\n        width={1200}\n        height={700}\n        wheelSize={1100}\n        range={candidates.length}\n        innerRadius={250}\n        outerRadius={550}\n        showInnerLabels\n        drawLimitSwitch\n        drawLimit={drawLimit}\n        fontColor={\"#000\"}\n        fontSize={\"20px\"}\n        writingModel={\"tb\"}\n        drawButtonLabel={\"Start\"}\n        textArray={candidates}\n        onSuccessDrawReturn={handleFinished}\n        onOutLimitAlert={limit => {\n          if (limit) {\n            window.alert(\"Out of turns\");\n          }\n        }}\n        style={{\n          margin: 'auto',\n        }}\n      />\n    );\n  }\n}\n","import React from 'react';\r\nimport { Modal, Form, Input, InputNumber } from \"antd\";\r\n\r\nconst InputPopup = Form.create({ name: \"form_in_modal\" })(\r\n  class extends React.Component {\r\n    render() {\r\n      const { onCreate, form } = this.props;\r\n      const { getFieldDecorator } = form;\r\n      return (\r\n        <Modal\r\n          title=\"Lucky Draw Config\"\r\n          okText=\"OK\"\r\n          cancelText=\"Disabled!\"\r\n          onOk={onCreate}\r\n          visible\r\n        >\r\n          <Form layout=\"vertical\">\r\n            <Form.Item label=\"Lucky Draw Title\">\r\n              {getFieldDecorator('luckyDrawTitle', {\r\n                rules: [\r\n                  {\r\n                    required: true,\r\n                    message: \"This is a required!\"\r\n                  }\r\n                ]\r\n              })(<Input />)}\r\n            </Form.Item>\r\n            <Form.Item label=\"List Candidates\" extra=\"Candidates must splited by comma (,) character\">\r\n              {getFieldDecorator('candidates', {\r\n                rules: [\r\n                  {\r\n                    required: true,\r\n                    message: \"This is a required!\"\r\n                  }\r\n                ]\r\n              })(<Input />)}\r\n            </Form.Item>\r\n            <Form.Item label=\"Maximum Turns\">\r\n              {getFieldDecorator('drawLimit', {\r\n                rules: [\r\n                  {\r\n                    required: true,\r\n                    message: \"This is a required!\"\r\n                  }\r\n                ]\r\n              })(<InputNumber />)}\r\n            </Form.Item>\r\n          </Form>\r\n        </Modal>\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nexport default InputPopup;","import React from \"react\";\r\nimport { Modal } from \"antd\";\r\n\r\nconst showCongratulation = (title, selectedCandidate, handleStopFiring) => {\r\n  Modal.success({\r\n    content: (\r\n      <h2>\r\n        Congratulations to{\" \"}\r\n        <span style={{ fontWeight: \"bold\", color: \"red\" }}>\r\n          {selectedCandidate}\r\n        </span>\r\n      </h2>\r\n    ),\r\n    icon: (\r\n      <h1>\r\n        <img alt=\"\" src=\"https://img.icons8.com/bubbles/100/000000/prize.png\" />\r\n        &ensp;\r\n        {title}\r\n      </h1>\r\n    ),\r\n    onOk: () => handleStopFiring(selectedCandidate),\r\n    width: 600,\r\n  });\r\n};\r\n\r\nexport default showCongratulation;\r\n","import React from \"react\";\nimport { List } from \"antd\";\n\nexport default class ListCandidates extends React.Component {\n  render() {\n    const { selectedCandidates } = this.props;\n    return (\n      <List\n        style={{ marginTop: \"85px\" }}\n        header={\n          <h3 style={{ margin: \"16px 0\", color: \"white\" }}>\n            Congratulations to\n          </h3>\n        }\n        size=\"large\"\n        bordered\n        dataSource={selectedCandidates}\n        renderItem={item => <List.Item>{item}</List.Item>}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport LuckyDrawComponent from \"./LuckyDrawComponent\";\nimport InputPopup from \"./InputPopup\";\nimport showCongratulation from \"./Congratulation\";\nimport ListCandidates from \"./ListCandidates\";\n\nimport \"antd/dist/antd.css\";\nimport \"./App.scss\";\nimport \"./firework.scss\";\n\nexport default class App extends React.Component {\n  state = {\n    luckyDrawTitle: \"Lucky Draw\",\n    candidates: [],\n    selectedCandidates: [],\n    isConfigPopupOpen: true,\n    isFiring: false,\n    drawLimit: 100,\n  };\n\n  handleCreate = () => {\n    const { form } = this.formRef.props;\n    form.validateFields((err, values) => {\n      if (err) {\n        return;\n      }\n      form.resetFields();\n      const { luckyDrawTitle, candidates, drawLimit } = values;\n      this.setState({\n        luckyDrawTitle,\n        candidates: candidates.split(\",\"),\n        isConfigPopupOpen: false,\n        drawLimit: parseInt(drawLimit)\n      });\n    });\n  };\n\n  saveFormRef = formRef => {\n    this.formRef = formRef;\n  };\n\n  onStopFiring = (candidate) => {\n    const candidates = this.state.candidates.filter(item => item !== candidate);\n    this.setState({\n      isFiring: false,\n      candidates,\n    });\n  };\n\n  onDrawingCompleted = candidateId => {\n    const selectedCandidate = this.state.candidates[candidateId];\n    const selectedCandidates = [...this.state.selectedCandidates, selectedCandidate];\n    this.setState(\n      {\n        isFiring: true,\n        selectedCandidates,\n      },\n      () =>\n        showCongratulation(\n          this.state.luckyDrawTitle,\n          selectedCandidate,\n          this.onStopFiring\n        )\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"main-app\">\n        {this.state.isFiring && (\n          <div className=\"pyro\">\n            <div className=\"before\" />\n            <div className=\"after\" />\n          </div>\n        )}\n        {this.state.isConfigPopupOpen && (\n          <InputPopup\n            wrappedComponentRef={this.saveFormRef}\n            onCreate={this.handleCreate}\n          />\n        )}\n        <h1 style={{ color: 'white' }}>{this.state.luckyDrawTitle}</h1>\n        <LuckyDrawComponent\n          candidates={this.state.candidates}\n          handleFinished={this.onDrawingCompleted}\n          drawLimit={this.state.drawLimit}\n        />\n        <ListCandidates selectedCandidates={this.state.selectedCandidates} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}